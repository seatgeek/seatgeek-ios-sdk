// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MarkdownKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreGraphics
import Foundation
@_exported import MarkdownKit
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers open class MarkdownCodeEscaping : MarkdownKit.MarkdownElement {
  open var regex: Swift.String {
    get
  }
  open func regularExpression() throws -> Foundation.NSRegularExpression
  open func match(_ match: Foundation.NSTextCheckingResult, attributedString: Foundation.NSMutableAttributedString)
  @objc deinit
}
open class MarkdownCode : MarkdownKit.MarkdownCommonElement {
  open var font: MarkdownKit.MarkdownFont?
  open var color: MarkdownKit.MarkdownColor?
  open var textHighlightColor: MarkdownKit.MarkdownColor?
  open var textBackgroundColor: MarkdownKit.MarkdownColor?
  open var regex: Swift.String {
    get
  }
  public init(font: MarkdownKit.MarkdownFont? = MarkdownCode.defaultFont, color: MarkdownKit.MarkdownColor? = nil, textHighlightColor: MarkdownKit.MarkdownColor? = MarkdownCode.defaultHighlightColor, textBackgroundColor: MarkdownKit.MarkdownColor? = MarkdownCode.defaultBackgroundColor)
  open func addAttributes(_ attributedString: Foundation.NSMutableAttributedString, range: Foundation.NSRange)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class MarkdownUnescaping : MarkdownKit.MarkdownElement {
  open var regex: Swift.String {
    get
  }
  open func regularExpression() throws -> Foundation.NSRegularExpression
  open func match(_ match: Foundation.NSTextCheckingResult, attributedString: Foundation.NSMutableAttributedString)
  @objc deinit
}
open class MarkdownHeader : MarkdownKit.MarkdownLevelElement {
  open var maxLevel: Swift.Int
  open var font: MarkdownKit.MarkdownFont?
  open var color: MarkdownKit.MarkdownColor?
  open var fontIncrease: Swift.Int
  open var regex: Swift.String {
    get
  }
  public init(font: MarkdownKit.MarkdownFont? = MarkdownHeader.defaultFont, maxLevel: Swift.Int = 0, fontIncrease: Swift.Int = 2, color: MarkdownKit.MarkdownColor? = nil)
  open func formatText(_ attributedString: Foundation.NSMutableAttributedString, range: Foundation.NSRange, level: Swift.Int)
  open func attributesForLevel(_ level: Swift.Int) -> [Foundation.NSAttributedString.Key : Swift.AnyObject]
  @objc deinit
}
open class MarkdownParser {
  public struct EnabledElements : Swift.OptionSet {
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public static let automaticLink: MarkdownKit.MarkdownParser.EnabledElements
    public static let header: MarkdownKit.MarkdownParser.EnabledElements
    public static let list: MarkdownKit.MarkdownParser.EnabledElements
    public static let quote: MarkdownKit.MarkdownParser.EnabledElements
    public static let link: MarkdownKit.MarkdownParser.EnabledElements
    public static let bold: MarkdownKit.MarkdownParser.EnabledElements
    public static let italic: MarkdownKit.MarkdownParser.EnabledElements
    public static let code: MarkdownKit.MarkdownParser.EnabledElements
    public static let strikethrough: MarkdownKit.MarkdownParser.EnabledElements
    public static let disabledAutomaticLink: MarkdownKit.MarkdownParser.EnabledElements
    public static let all: MarkdownKit.MarkdownParser.EnabledElements
    public typealias ArrayLiteralElement = MarkdownKit.MarkdownParser.EnabledElements
    public typealias Element = MarkdownKit.MarkdownParser.EnabledElements
    public typealias RawValue = Swift.Int
  }
  open var customElements: [any MarkdownKit.MarkdownElement]
  final public let header: MarkdownKit.MarkdownHeader
  final public let list: MarkdownKit.MarkdownList
  final public let quote: MarkdownKit.MarkdownQuote
  final public let link: MarkdownKit.MarkdownLink
  final public let automaticLink: MarkdownKit.MarkdownAutomaticLink
  final public let bold: MarkdownKit.MarkdownBold
  final public let italic: MarkdownKit.MarkdownItalic
  final public let code: MarkdownKit.MarkdownCode
  final public let strikethrough: MarkdownKit.MarkdownStrikethrough
  open var enabledElements: MarkdownKit.MarkdownParser.EnabledElements {
    get
    set
  }
  final public let font: MarkdownKit.MarkdownFont
  final public let color: MarkdownKit.MarkdownColor
  @available(*, deprecated, renamed: "init", message: "This constructor will be removed soon, please use the new opions constructor")
  convenience public init(automaticLinkDetectionEnabled: Swift.Bool, font: MarkdownKit.MarkdownFont = MarkdownParser.defaultFont, customElements: [any MarkdownKit.MarkdownElement] = [])
  public init(font: MarkdownKit.MarkdownFont = MarkdownParser.defaultFont, color: MarkdownKit.MarkdownColor = MarkdownParser.defaultColor, enabledElements: MarkdownKit.MarkdownParser.EnabledElements = .all, customElements: [any MarkdownKit.MarkdownElement] = [])
  open func addCustomElement(_ element: any MarkdownKit.MarkdownElement)
  open func removeCustomElement(_ element: any MarkdownKit.MarkdownElement)
  open func parse(_ markdown: Swift.String) -> Foundation.NSAttributedString
  open func parse(_ markdown: Foundation.NSAttributedString) -> Foundation.NSAttributedString
  @objc deinit
}
extension MarkdownKit.MarkdownCode {
  public static let defaultHighlightColor: UIKit.UIColor
  public static let defaultBackgroundColor: UIKit.UIColor
  public static let defaultFont: UIKit.UIFont?
}
open class MarkdownBold : MarkdownKit.MarkdownCommonElement {
  open var font: MarkdownKit.MarkdownFont?
  open var color: MarkdownKit.MarkdownColor?
  open var regex: Swift.String {
    get
  }
  public init(font: MarkdownKit.MarkdownFont? = nil, color: MarkdownKit.MarkdownColor? = nil)
  @objc deinit
}
open class MarkdownLink : MarkdownKit.MarkdownLinkElement {
  open var font: MarkdownKit.MarkdownFont?
  open var color: MarkdownKit.MarkdownColor?
  open var regex: Swift.String {
    get
  }
  open func regularExpression() throws -> Foundation.NSRegularExpression
  public init(font: MarkdownKit.MarkdownFont? = nil, color: MarkdownKit.MarkdownColor? = MarkdownLink.defaultColor)
  open func formatText(_ attributedString: Foundation.NSMutableAttributedString, range: Foundation.NSRange, link: Swift.String)
  open func match(_ match: Foundation.NSTextCheckingResult, attributedString: Foundation.NSMutableAttributedString)
  open func addAttributes(_ attributedString: Foundation.NSMutableAttributedString, range: Foundation.NSRange, link: Swift.String)
  @objc deinit
}
extension MarkdownKit.MarkdownLink {
  public static let defaultColor: UIKit.UIColor
}
@_inheritsConvenienceInitializers open class MarkdownAutomaticLink : MarkdownKit.MarkdownLink {
  override open func regularExpression() throws -> Foundation.NSRegularExpression
  override open func match(_ match: Foundation.NSTextCheckingResult, attributedString: Foundation.NSMutableAttributedString)
  override public init(font: MarkdownKit.MarkdownFont? = nil, color: MarkdownKit.MarkdownColor? = super)
  @objc deinit
}
open class MarkdownList : MarkdownKit.MarkdownLevelElement {
  open var maxLevel: Swift.Int
  open var font: MarkdownKit.MarkdownFont?
  open var color: MarkdownKit.MarkdownColor?
  open var separator: Swift.String
  open var indicator: Swift.String
  open var regex: Swift.String {
    get
  }
  public init(font: MarkdownKit.MarkdownFont? = nil, maxLevel: Swift.Int = 6, indicator: Swift.String = "●", separator: Swift.String = "  ", color: MarkdownKit.MarkdownColor? = nil)
  open func formatText(_ attributedString: Foundation.NSMutableAttributedString, range: Foundation.NSRange, level: Swift.Int)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class MarkdownEscaping : MarkdownKit.MarkdownElement {
  open var regex: Swift.String {
    get
  }
  open func regularExpression() throws -> Foundation.NSRegularExpression
  open func match(_ match: Foundation.NSTextCheckingResult, attributedString: Foundation.NSMutableAttributedString)
  @objc deinit
}
public protocol MarkdownLevelElement : MarkdownKit.MarkdownElement, MarkdownKit.MarkdownStyle {
  var maxLevel: Swift.Int { get }
  func formatText(_ attributedString: Foundation.NSMutableAttributedString, range: Foundation.NSRange, level: Swift.Int)
  func addAttributes(_ attributedString: Foundation.NSMutableAttributedString, range: Foundation.NSRange, level: Swift.Int)
  func attributesForLevel(_ level: Swift.Int) -> [Foundation.NSAttributedString.Key : Swift.AnyObject]
}
extension MarkdownKit.MarkdownLevelElement {
  public func regularExpression() throws -> Foundation.NSRegularExpression
  public func addAttributes(_ attributedString: Foundation.NSMutableAttributedString, range: Foundation.NSRange, level: Swift.Int)
  public func attributesForLevel(_ level: Swift.Int) -> [Foundation.NSAttributedString.Key : Swift.AnyObject]
  public func match(_ match: Foundation.NSTextCheckingResult, attributedString: Foundation.NSMutableAttributedString)
}
public typealias MarkdownFont = UIKit.UIFont
public typealias MarkdownColor = UIKit.UIColor
public typealias NSMutableParagraphStyle = UIKit.NSMutableParagraphStyle
public typealias NSUnderlineStyle = UIKit.NSUnderlineStyle
extension MarkdownKit.MarkdownHeader {
  public static let defaultFont: UIKit.UIFont
}
public protocol MarkdownCommonElement : MarkdownKit.MarkdownElement, MarkdownKit.MarkdownStyle {
  func addAttributes(_ attributedString: Foundation.NSMutableAttributedString, range: Foundation.NSRange)
}
extension MarkdownKit.MarkdownCommonElement {
  public func regularExpression() throws -> Foundation.NSRegularExpression
  public func addAttributes(_ attributedString: Foundation.NSMutableAttributedString, range: Foundation.NSRange)
  public func match(_ match: Foundation.NSTextCheckingResult, attributedString: Foundation.NSMutableAttributedString)
}
public protocol MarkdownStyle {
  var font: MarkdownKit.MarkdownFont? { get }
  var color: MarkdownKit.MarkdownColor? { get }
  var attributes: [Foundation.NSAttributedString.Key : Swift.AnyObject] { get }
}
extension MarkdownKit.MarkdownStyle {
  public var attributes: [Foundation.NSAttributedString.Key : Swift.AnyObject] {
    get
  }
}
open class MarkdownItalic : MarkdownKit.MarkdownCommonElement {
  open var font: MarkdownKit.MarkdownFont?
  open var color: MarkdownKit.MarkdownColor?
  open var regex: Swift.String {
    get
  }
  public init(font: MarkdownKit.MarkdownFont?, color: MarkdownKit.MarkdownColor? = nil)
  @objc deinit
}
open class MarkdownStrikethrough : MarkdownKit.MarkdownCommonElement {
  open var font: MarkdownKit.MarkdownFont?
  open var color: MarkdownKit.MarkdownColor?
  public var attributes: [Foundation.NSAttributedString.Key : Swift.AnyObject]
  open var regex: Swift.String {
    get
  }
  public init(font: MarkdownKit.MarkdownFont? = nil, color: MarkdownKit.MarkdownColor? = nil)
  @objc deinit
}
open class MarkdownQuote : MarkdownKit.MarkdownLevelElement {
  open var maxLevel: Swift.Int
  open var font: MarkdownKit.MarkdownFont?
  open var color: MarkdownKit.MarkdownColor?
  open var separator: Swift.String
  open var indicator: Swift.String
  open var regex: Swift.String {
    get
  }
  public init(font: MarkdownKit.MarkdownFont? = nil, maxLevel: Swift.Int = 0, indicator: Swift.String = ">", separator: Swift.String = "  ", color: MarkdownKit.MarkdownColor? = nil)
  open func formatText(_ attributedString: Foundation.NSMutableAttributedString, range: Foundation.NSRange, level: Swift.Int)
  @objc deinit
}
public protocol MarkdownElement : AnyObject {
  var regex: Swift.String { get }
  func regularExpression() throws -> Foundation.NSRegularExpression
  func parse(_ attributedString: Foundation.NSMutableAttributedString)
  func match(_ match: Foundation.NSTextCheckingResult, attributedString: Foundation.NSMutableAttributedString)
}
extension MarkdownKit.MarkdownElement {
  public func parse(_ attributedString: Foundation.NSMutableAttributedString)
}
extension MarkdownKit.MarkdownParser {
  public static let defaultFont: UIKit.UIFont
  public static let defaultColor: UIKit.UIColor
}
public protocol MarkdownLinkElement : MarkdownKit.MarkdownElement, MarkdownKit.MarkdownStyle {
  func formatText(_ attributedString: Foundation.NSMutableAttributedString, range: Foundation.NSRange, link: Swift.String)
  func addAttributes(_ attributedString: Foundation.NSMutableAttributedString, range: Foundation.NSRange, link: Swift.String)
}
