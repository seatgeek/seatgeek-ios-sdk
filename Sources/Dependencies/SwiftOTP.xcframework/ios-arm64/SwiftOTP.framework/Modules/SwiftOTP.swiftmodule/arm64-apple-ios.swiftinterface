// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SwiftOTP
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CryptoKit
import Foundation
import Swift
@_exported import SwiftOTP
import _Concurrency
import _StringProcessing
public struct TOTP {
  public let secret: Foundation.Data
  public let digits: Swift.Int
  public let timeInterval: Swift.Int
  public let algorithm: SwiftOTP.OTPAlgorithm
  public init?(secret: Foundation.Data, digits: Swift.Int = 6, timeInterval: Swift.Int = 30, algorithm: SwiftOTP.OTPAlgorithm = .sha1)
  public func generate(time: Foundation.Date) -> Swift.String?
  public func generate(secondsPast1970: Swift.Int) -> Swift.String?
}
public func base32Encode(_ data: Foundation.Data) -> Swift.String
public func base32HexEncode(_ data: Foundation.Data) -> Swift.String
public func base32DecodeToData(_ string: Swift.String) -> Foundation.Data?
public func base32HexDecodeToData(_ string: Swift.String) -> Foundation.Data?
public func base32Encode(_ array: [Swift.UInt8]) -> Swift.String
public func base32HexEncode(_ array: [Swift.UInt8]) -> Swift.String
public func base32Decode(_ string: Swift.String) -> [Swift.UInt8]?
public func base32HexDecode(_ string: Swift.String) -> [Swift.UInt8]?
extension Swift.String {
  public var base32DecodedData: Foundation.Data? {
    get
  }
  public var base32EncodedString: Swift.String {
    get
  }
  public func base32DecodedString(_ encoding: Swift.String.Encoding = .utf8) -> Swift.String?
  public var base32HexDecodedData: Foundation.Data? {
    get
  }
  public var base32HexEncodedString: Swift.String {
    get
  }
  public func base32HexDecodedString(_ encoding: Swift.String.Encoding = .utf8) -> Swift.String?
}
extension Foundation.Data {
  public var base32EncodedString: Swift.String {
    get
  }
  public var base32EncodedData: Foundation.Data {
    get
  }
  public var base32DecodedData: Foundation.Data? {
    get
  }
  public var base32HexEncodedString: Swift.String {
    get
  }
  public var base32HexEncodedData: Foundation.Data {
    get
  }
  public var base32HexDecodedData: Foundation.Data? {
    get
  }
}
public struct HOTP {
  public let secret: Foundation.Data
  public let digits: Swift.Int
  public let algorithm: SwiftOTP.OTPAlgorithm
  public init?(secret: Foundation.Data, digits: Swift.Int = 6, algorithm: SwiftOTP.OTPAlgorithm = .sha1)
  public func generate(counter: Swift.UInt64) -> Swift.String?
}
public enum OTPAlgorithm {
  case sha1
  case sha256
  case sha512
  public static func == (a: SwiftOTP.OTPAlgorithm, b: SwiftOTP.OTPAlgorithm) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.Data {
  public var bytes: Swift.Array<Swift.UInt8> {
    get
  }
  public init(hex: Swift.String)
}
extension Swift.Array where Element == Swift.UInt8 {
  public init(hex: Swift.String)
  public func toHexString() -> Swift.String
}
extension SwiftOTP.OTPAlgorithm : Swift.Equatable {}
extension SwiftOTP.OTPAlgorithm : Swift.Hashable {}
